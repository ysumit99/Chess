{"version":3,"sources":["components/battle/initialBoard.js","images/startPlay.svg","images/restartGame.svg","images/bishop-black.svg","images/bishop-white.svg","images/king-black.svg","images/king-white.svg","images/knight-black.svg","images/knight-white.svg","images/pawn-black.svg","images/pawn-white.svg","images/queen-black.svg","images/queen-white.svg","images/rook-black.svg","images/rook-white.svg","components/battle/utility.js","components/battle/ChessBoard.js","App.js","reportWebVitals.js","index.js"],"names":["initialBoard","fileIndex","file","index","console","log","rankIndex","rank","isValidTile","isValid","getRank","rowIndex","getFile","colIndex","ChessBoard","props","validTile","tile","document","getElementById","style","boxShadow","highlightValidTiles","validTiles","validEmptyTiles","captureTiles","id","utility","resetHighLight","blocks","getElementsByClassName","i","length","getTileColor","tileColor","updateBoard","initialTile","finalTile","row1","col1","row2","col2","prevBoard","state","board","updatedTile","setState","rank1","file1","pawnValidMoves","color","opponentPieceColor","push","knightValidMoves","e","name","rookValidMoves","j","bishopValidMoves","queenValidMoves","error","kingValidMoves","isKingChecked","validKingTile","isChecked","row","col","Array","piece","moveCount","score","white","black","selectedTile","startGame","bind","handleClick","this","querySelector","filter","currentTarget","tileStatus","getTileStatus","selectedPiece","alert","destinationTile","sourceTile","sourceTileColIndex","sourceTileRowIndex","destinationTileColIndex","status","className","src","startPlay","alt","onClick","restartGame","slice","reverse","map","tileCounter","toString","pieceClass","PawnWhite","PawnBlack","RookWhite","RookBlack","KnightWhite","KnightBlack","BishopWhite","BishopBlack","KingWhite","KingBlack","QueenWhite","QueenBlack","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.34263e7d.chunk.js","sourcesContent":["let initialBoard = [\n    {\n        \"id\": \"a8\",\n        \"blockColor\": \"W\",\n        \"piece\": \"BR\"\n    },\n    {\n        \"id\": \"b8\",\n        \"blockColor\": \"B\",\n        \"piece\": \"BN\"\n    },\n    {\n        \"id\": \"c8\",\n        \"blockColor\": \"W\",\n        \"piece\": \"BB\"\n    },\n    {\n        \"id\": \"d8\",\n        \"blockColor\": \"B\",\n        \"piece\": \"BQ\"\n    },\n    {\n        \"id\": \"e8\",\n        \"blockColor\": \"W\",\n        \"piece\": \"BK\"\n    },\n    {\n        \"id\": \"f8\",\n        \"blockColor\": \"B\",\n        \"piece\": \"BB\"\n    },\n    {\n        \"id\": \"g8\",\n        \"blockColor\": \"W\",\n        \"piece\": \"BN\"\n    },\n    {\n        \"id\": \"h8\",\n        \"blockColor\": \"B\",\n        \"piece\": \"BR\"\n    },\n    {\n        \"id\": \"a7\",\n        \"blockColor\": \"B\",\n        \"piece\": \"BP\"\n    },\n    {\n        \"id\": \"b7\",\n        \"blockColor\": \"W\",\n        \"piece\": \"BP\"\n    },\n    {\n        \"id\": \"c7\",\n        \"blockColor\": \"B\",\n        \"piece\": \"BP\"\n    },\n    {\n        \"id\": \"d7\",\n        \"blockColor\": \"W\",\n        \"piece\": \"BP\"\n    },\n    {\n        \"id\": \"e7\",\n        \"blockColor\": \"B\",\n        \"piece\": \"BP\"\n    },\n    {\n        \"id\": \"f7\",\n        \"blockColor\": \"W\",\n        \"piece\": \"BP\"\n    },\n    {\n        \"id\": \"g7\",\n        \"blockColor\": \"B\",\n        \"piece\": \"BP\"\n    }, {\n        \"id\": \"h7\",\n        \"blockColor\": \"W\",\n        \"piece\": \"BP\"\n    },\n    {\n        \"id\": \"a6\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"b6\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"c6\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"d6\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"e6\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"f6\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"g6\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    }, {\n        \"id\": \"h6\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"a5\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"b5\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"c5\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"d5\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"e5\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"f5\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"g5\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    }, {\n        \"id\": \"h5\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"a4\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"b4\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"c4\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"d4\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"e4\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"f4\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"g4\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    }, {\n        \"id\": \"h4\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"a3\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"b3\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"c3\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"d3\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"e3\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"f3\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"g3\",\n        \"blockColor\": \"B\",\n        \"piece\": \"XX\"\n    }, {\n        \"id\": \"h3\",\n        \"blockColor\": \"W\",\n        \"piece\": \"XX\"\n    },\n    {\n        \"id\": \"a2\",\n        \"blockColor\": \"W\",\n        \"piece\": \"WP\"\n    },\n    {\n        \"id\": \"b2\",\n        \"blockColor\": \"B\",\n        \"piece\": \"WP\"\n    },\n    {\n        \"id\": \"c2\",\n        \"blockColor\": \"W\",\n        \"piece\": \"WP\"\n    },\n    {\n        \"id\": \"d2\",\n        \"blockColor\": \"B\",\n        \"piece\": \"WP\"\n    },\n    {\n        \"id\": \"e2\",\n        \"blockColor\": \"W\",\n        \"piece\": \"WP\"\n    },\n    {\n        \"id\": \"f2\",\n        \"blockColor\": \"B\",\n        \"piece\": \"WP\"\n    },\n    {\n        \"id\": \"g2\",\n        \"blockColor\": \"W\",\n        \"piece\": \"WP\"\n    }, {\n        \"id\": \"h2\",\n        \"blockColor\": \"B\",\n        \"piece\": \"WP\"\n    },\n    {\n        \"id\": \"a1\",\n        \"blockColor\": \"B\",\n        \"piece\": \"WR\"\n    },\n    {\n        \"id\": \"b1\",\n        \"blockColor\": \"W\",\n        \"piece\": \"WN\"\n    },\n    {\n        \"id\": \"c1\",\n        \"blockColor\": \"B\",\n        \"piece\": \"WB\"\n    },\n    {\n        \"id\": \"d1\",\n        \"blockColor\": \"W\",\n        \"piece\": \"WQ\"\n    },\n    {\n        \"id\": \"e1\",\n        \"blockColor\": \"B\",\n        \"piece\": \"WK\"\n    },\n    {\n        \"id\": \"f1\",\n        \"blockColor\": \"W\",\n        \"piece\": \"WB\"\n    },\n    {\n        \"id\": \"g1\",\n        \"blockColor\": \"B\",\n        \"piece\": \"WN\"\n    },\n    {\n        \"id\": \"h1\",\n        \"blockColor\": \"W\",\n        \"piece\": \"WR\"\n    }\n];\n\nexport default initialBoard;","export default __webpack_public_path__ + \"static/media/startPlay.0e6eade3.svg\";","export default __webpack_public_path__ + \"static/media/restartGame.6615ffb7.svg\";","export default __webpack_public_path__ + \"static/media/bishop-black.c1194bc8.svg\";","export default __webpack_public_path__ + \"static/media/bishop-white.2f8ae726.svg\";","export default __webpack_public_path__ + \"static/media/king-black.bc7e212d.svg\";","export default __webpack_public_path__ + \"static/media/king-white.585f9af3.svg\";","export default __webpack_public_path__ + \"static/media/knight-black.1ed3a85a.svg\";","export default __webpack_public_path__ + \"static/media/knight-white.ce699e48.svg\";","export default __webpack_public_path__ + \"static/media/pawn-black.6c81f4df.svg\";","export default __webpack_public_path__ + \"static/media/pawn-white.88d914f9.svg\";","export default __webpack_public_path__ + \"static/media/queen-black.fe1c52ab.svg\";","export default __webpack_public_path__ + \"static/media/queen-white.263b3df4.svg\";","export default __webpack_public_path__ + \"static/media/rook-black.fc65950f.svg\";","export default __webpack_public_path__ + \"static/media/rook-white.ea8c578b.svg\";","let fileIndex = (file) => {\n\n\n    let index = -1;\n\n\n    switch (file) {\n\n\n        case 'a':\n            index = 0;\n            break;\n        case 'b':\n            index = 1;\n            break;\n        case 'c':\n            index = 2;\n            break;\n        case 'd':\n            index = 3;\n            break;\n        case 'e':\n            index = 4;\n            break;\n        case 'f':\n            index = 5;\n            break;\n        case 'g':\n            index = 6;\n            break;\n        case 'h':\n            index = 7;\n            break;\n        default:\n            console.log(\"file not found!\");\n\n\n    }\n\n    return index;\n\n}\n\n/* Index of a rank in the board array */\nlet rankIndex = (rank) => {\n\n\n\n    let index = -1;\n\n    switch (rank) {\n\n        case '1':\n            index = 0;\n            break;\n        case '2':\n            index = 1;\n            break;\n        case '3':\n            index = 2;\n            break;\n        case '4':\n            index = 3;\n            break;\n        case '5':\n            index = 4;\n            break;\n        case '6':\n            index = 5;\n            break;\n        case '7':\n            index = 6;\n            break;\n        case '8':\n            index = 7;\n            break;\n        default:\n            console.log(\"rank not found!\");\n\n    }\n\n    return index;\n\n}\n\nlet isValidTile = (index) => {\n\n    let isValid = true;\n\n    if (index < 0 || index > 7)\n        isValid = false;\n\n    return isValid;\n\n}\n\n/* get Rank for RowIndex */\nlet getRank = (rowIndex) => {\n\n    console.log(\"rowIndex in gerRank function => \" + rowIndex);\n\n    let rank = \"\";\n\n    switch (rowIndex) {\n\n        case \"0\":\n            rank = \"1\";\n            break;\n        case \"1\":\n            rank = \"2\";\n            break;\n        case \"2\":\n            rank = \"3\";\n            break;\n        case \"3\":\n            rank = \"4\";\n            break;\n        case \"4\":\n            rank = \"5\";\n            break;\n        case \"5\":\n            rank = \"6\";\n            break;\n        case \"6\":\n            rank = \"7\";\n            break;\n        case \"7\":\n            rank = \"8\";\n            break;\n        default:\n            console.log(\"rowIndex doesn't exist!\");\n\n    }\n\n    return rank;\n}\n\n\n/* get file for ColIndex */\nlet getFile = (colIndex) => {\n\n    console.log(\"colIndex in getFile function => \" + colIndex);\n\n    let file = \"\";\n\n    switch (colIndex) {\n\n        case \"0\":\n            file = \"a\";\n            break;\n        case \"1\":\n            file = \"b\";\n            break;\n        case \"2\":\n            file = \"c\";\n            break;\n        case \"3\":\n            file = \"d\";\n            break;\n        case \"4\":\n            file = \"e\";\n            break;\n        case \"5\":\n            file = \"f\";\n            break;\n        case \"6\":\n            file = \"g\";\n            break;\n        case \"7\":\n            file = \"h\";\n            break;\n        default:\n            console.log(\"colIndex doesn't exist!\");\n\n    }\n\n    return file;\n}\n\n\nexport { rankIndex, fileIndex, isValidTile, getRank, getFile };","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './ChessBoard.css';\nimport initialBoard from './initialBoard';\nimport startPlay from '../../images/startPlay.svg';\nimport restartGame from '../../images/restartGame.svg';\nimport BishopBlack from '../../images/bishop-black.svg';\nimport BishopWhite from '../../images/bishop-white.svg';\nimport KingBlack from '../../images/king-black.svg';\nimport KingWhite from '../../images/king-white.svg';\nimport KnightBlack from '../../images/knight-black.svg';\nimport KnightWhite from '../../images/knight-white.svg';\nimport PawnBlack from '../../images/pawn-black.svg';\nimport PawnWhite from '../../images/pawn-white.svg';\nimport QueenBlack from '../../images/queen-black.svg';\nimport QueenWhite from '../../images/queen-white.svg';\nimport RookBlack from '../../images/rook-black.svg';\nimport RookWhite from '../../images/rook-white.svg';\nimport * as utility from './utility';\n\n\nclass ChessBoard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        /**\n         * SetUp Board Array\n         */\n        let board = new Array(8);\n        for (let i = 0; i < board.length; i++) {\n            board[i] = new Array(8);\n        }\n        console.log(board);\n        for (let i = 0; i < initialBoard.length; i++) {\n            let rowIndex = initialBoard[i].id[1];\n            let colIndex = initialBoard[i].id[0];\n            board[utility.rankIndex(rowIndex)][utility.fileIndex(colIndex)] = initialBoard[i].piece;\n\n        }\n\n        /**\n         * Board State\n         */\n        this.state = {\n            initialBoard: initialBoard,\n            board: board,\n            moveCount: 0,\n            score: { white: 0, black: 0 },\n            selectedTile: \"\"\n        };\n        this.startGame = this.startGame.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        console.log(this.state.initialBoard);\n        console.log(this.state.board);\n    }\n\n\n    startGame() {\n        console.log(this.state.board);\n        document.querySelector('#boardContainer').style.filter = \"none\";\n\n\n    }\n\n    /**\n     * \n     * @param {event} e \n     */\n    handleClick(e) {\n        let tile = e.currentTarget.id;\n        const tileStatus = this.getTileStatus(tile);\n\n        if (tileStatus === \"unselectedTile\") { /* Still choosing a piece */\n            let colIndex = utility.fileIndex(tile[0]);\n            let rowIndex = utility.rankIndex(tile[1]);\n            let selectedPiece = this.state.board[rowIndex][colIndex];\n\n            //console.log(colIndex + \" \" + rowIndex);\n\n            this.resetHighLight();\n            //console.log(this.state.board[rowIndex][colIndex]);\n            if (selectedPiece !== \"XX\") { /* If tile is not empty */\n\n                /** Opponent's piece touched*/\n                if (this.state.moveCount % 2 === 0) { /* White's Move */\n                    // console.log('Whites Move');\n                    // console.log(selectedPiece);\n                    if (selectedPiece[0] === 'B') {\n                        alert(`That is opponent's piece!`);\n                        return;\n                    }\n                } else { /* Black's Move */\n                    //console.log('Blacks Move');\n                    if (selectedPiece[0] === 'W') {\n                        alert(`That is opponent's piece!`);\n                        return\n                    }\n                }\n\n                /** Highlight selected tile */\n                this.validTile(tile);\n                this.setState({ 'selectedTile': tile });\n\n                let validTiles = null;\n                switch (this.state.board[rowIndex][colIndex]) {\n                    case \"WP\":\n                        validTiles = this.pawnValidMoves(rowIndex, colIndex, \"W\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"WN\":\n                        validTiles = this.knightValidMoves(rowIndex, colIndex, \"W\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"WR\":\n                        validTiles = this.rookValidMoves(rowIndex, colIndex, \"W\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"WB\":\n                        validTiles = this.bishopValidMoves(rowIndex, colIndex, \"W\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"WQ\":\n                        validTiles = this.queenValidMoves(rowIndex, colIndex, \"W\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"WK\":\n                        validTiles = this.kingValidMoves(rowIndex, colIndex, \"W\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"BP\":\n                        validTiles = this.pawnValidMoves(rowIndex, colIndex, \"B\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"BN\":\n                        validTiles = this.knightValidMoves(rowIndex, colIndex, \"B\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"BR\":\n                        validTiles = this.rookValidMoves(rowIndex, colIndex, \"B\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"BB\":\n                        validTiles = this.bishopValidMoves(rowIndex, colIndex, \"B\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"BQ\":\n                        validTiles = this.queenValidMoves(rowIndex, colIndex, \"B\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n                    case \"BK\":\n                        validTiles = this.kingValidMoves(rowIndex, colIndex, \"B\");\n                        this.highlightValidTiles(validTiles);\n                        break;\n\n                }\n\n            }\n        } else if (tileStatus === \"validMoveTile\") {\n            let destinationTile = tile;\n            let sourceTile = this.state.selectedTile;\n            let tileColor = this.getTileColor(destinationTile);\n\n            let sourceTileColIndex = utility.fileIndex(sourceTile[0]);\n            let sourceTileRowIndex = utility.rankIndex(sourceTile[1]);\n\n            let destinationTileColIndex = utility.fileIndex(destinationTile[0]);\n            let destinationTileRowIndex = utility.rankIndex(destinationTile[1]);\n\n            let initialTile = {\n                rowIndex: sourceTileRowIndex,\n                colIndex: sourceTileColIndex\n            };\n\n            let finalTile = {\n                rowIndex: destinationTileRowIndex,\n                colIndex: destinationTileColIndex\n            };\n\n            this.updateBoard(initialTile, finalTile);\n\n            this.resetHighLight();\n        }\n    }\n\n    getTileStatus(tile) {\n\n        console.log(`${tile}`);\n        let selectedTile = document.getElementById(`${tile}`);\n        let status = \"\";\n        if (selectedTile.style.boxShadow === \"\")\n            status = \"unselectedTile\";\n        else if (selectedTile.style.boxShadow === \"rgb(12, 112, 179) 0px 0px 40px inset\" || selectedTile.style.boxShadow === \"rgb(241, 58, 26) 0px 0px 40px inset\")\n            status = \"validMoveTile\";\n        else if (selectedTile.style.boxShadow === \"rgb(193, 231, 56) 0px 0px 40px inset\")\n            status = \"selectedTile\";\n\n        console.log(\"Tile status =====> \" + status);\n\n        return status;\n\n    }\n\n    validTile = (tile) => {\n\n        let selectedTile = document.getElementById(`${tile}`);\n        selectedTile.style.boxShadow = \"inset 0 0 40px  rgb(193, 231, 56)\"; /** Green Tile */\n\n    }\n\n    highlightValidTiles = (validTiles) => {\n\n        console.log(\"tiles to be highlighted => given below \");\n\n        let validEmptyTiles = validTiles.validEmptyTiles;\n        let captureTiles = validTiles.captureTiles;\n\n        // console.log(\"capture tiles ====> \" + captureTiles);\n\n        /* HighLight Empty Tiles in Blue  */\n        for (let tile of validEmptyTiles) {\n            console.log(\"valid Tiles coordinates => \" + tile.rowIndex + \", \" + tile.colIndex);\n\n            let file = utility.getFile(tile.colIndex);\n            let rank = utility.getRank(tile.rowIndex);\n            let id = file + rank;\n\n            console.log(\"id to be updated => \" + id);\n\n            //blue color\n            document.getElementById(id).style.boxShadow = \"inset  0 0 40px  rgb(12, 112, 179)\";\n\n\n        }\n\n        /* HighLight Pieces to be captured in Red */\n        for (let tile of captureTiles) {\n            console.log(\"valid Tiles coordinates => \" + tile.rowIndex + \", \" + tile.colIndex);\n\n            let file = utility.getFile(tile.colIndex);\n            let rank = utility.getRank(tile.rowIndex);\n            let id = file + rank;\n\n            console.log(\"id to be updated => \" + id);\n\n            //red color\n            document.getElementById(id).style.boxShadow = \"inset  0 0 40px  #f13a1a\";\n\n\n        }\n\n\n    }\n\n    resetHighLight = () => {\n\n        /** reset previous selected tile */\n        let blocks = document.getElementsByClassName('block');\n        for (let i = 0; i < blocks.length; i++) {\n            blocks[i].style.boxShadow = \"\";\n        }\n\n    }\n    getTileColor = (tile) => {\n\n        let tileBoxShadow = document.getElementById(`${tile}`).style.boxShadow;\n        let tileColor = \"\";\n\n        /*!!!!! The dependency on css increases tight coupling. Needs to be refactored using board array instead!!!!! */\n        switch (tileBoxShadow) {\n\n            case 'rgb(241, 58, 26) 0px 0px 40px inset': tileColor = \"red\";\n                break;\n\n            case 'rgb(12, 112, 179) 0px 0px 40px inset': tileColor = \"blue\";\n                break;\n\n            case 'rgb(193, 231, 56) 0px 0px 40px inset': tileColor = \"green\";\n                break;\n\n            default: console.log(\"Alien Tile!\");\n\n        }\n\n        //console.log(\"tile color => \" + tileColor);\n        return tileColor;\n    }\n\n    updateBoard = (initialTile, finalTile) => {\n\n        console.log(\"==========inside updateBoard function ==================\");\n\n        let row1 = initialTile.rowIndex, col1 = initialTile.colIndex;\n        let row2 = finalTile.rowIndex, col2 = finalTile.colIndex;\n\n        // this.setState(prevState => ({ 'board': tile });\n        let prevBoard = [...this.state.board];\n        let updatedTile = [...prevBoard[row2][col2]];\n        updatedTile = this.state.board[row1][col1];\n        prevBoard[row2][col2] = updatedTile;\n        this.setState({ 'board': prevBoard });\n\n\n        //board[row2][col2] = this.state.board[row1][col1]; //file tile updated\n        console.log(\"final tile after moving the piece => \" + this.state.board[row2][col2]);\n\n        prevBoard = [...this.state.board];\n        updatedTile = [...prevBoard[row1][col1]];\n        updatedTile = \"XX\";\n        prevBoard[row1][col1] = updatedTile;\n        this.setState({ 'board': prevBoard });\n\n        // board[row1][col1] = \"--\";//initial tile is empty\n        console.log(\"initial tile after moving => \" + this.state.board[row1][col1]);\n\n\n        let rank1 = utility.getRank(`${row1}`);\n        let rank2 = utility.getRank(`${row2}`);\n\n\n        let file1 = utility.getFile(`${col1}`);\n        let file2 = utility.getFile(`${col2}`);\n\n        //get the updated SVG for piece on finalTile\n        //let location = SVGLocation(row2, col2);\n\n        //console.log(\"upadted piece svg location => \" + location);\n        console.log(document.getElementById(`${file1}${rank1}`));\n        //Move the piece to final tile\n        //$(`#${file2}` + `${rank2}`).html(`<img src = '${location}' alt = \"chess piece\" />`);\n        //$(`#${file2}` + `${rank2}`).html(`<img src = '${location}' alt = \"chess piece\" />`);\n\n\n        //empty the initial tile\n        //$(`#${file1}` + `${rank1}`).html(\"\");\n\n\n        console.log(\"==========end of updateBoard function ==================\");\n\n        return;\n    }\n\n\n    /** Valid Moves for pieces \n* \n* Use board array to check the current board configuration,\n* and take current indexes i.e. rank, file and piece color and piece movement rules\n* into account for selecting valid moves.\n* \n*  Note: All the indexes are O based !\n*   \n*/\n\n\n\n\n    /**\n     * \n     * @param {*} rowIndex \n     * @param {*} colIndex \n     * @param {*} color \n     */\n\n    pawnValidMoves = (rowIndex, colIndex, color) => {\n\n        /**\n        * Move to Empty tiles => \n        *   Pawn can move one/two tiles for the first time and only once in subsequent moves \n        * \n        * Capture opponent's piece => \n        *   White Pawn can capture either left top-diagonal  or right top-diagonal Black pieces.\n        *   Black Pawn can capture either left bottom-diagonal  or right bottom-diagonal White pieces.\n        *   \n        */\n\n\n        let validTiles = [], captureTiles = [];\n        let opponentPieceColor = (color === 'W') ? 'B' : 'W';\n\n        /* If White pawn */\n        if (color === \"W\") {\n            /* Moves to empty tiles */\n\n            if (rowIndex === 1) //if first move => 2 possible tiles\n            {\n\n                for (let i = rowIndex + 1; i < (rowIndex + 3) && i < 8; i++) {\n\n                    if (this.state.board[i][colIndex] === \"XX\")\n                        validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                    else\n                        break; //A piece present in the way\n\n                }\n            }\n            else //single tile is possible\n            {\n                for (let i = rowIndex + 1; i < (rowIndex + 2) && i < 8; i++) {\n                    if (this.state.board[i][colIndex] === \"XX\")\n                        validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                    else\n                        break; //A piece present in the way\n\n                }\n            }\n\n            /* End of Moves to empty tiles */\n\n            /* Moves to capture opponent's piece */\n\n\n            if (utility.isValidTile(rowIndex + 1)) {\n                /* Left Diagonal capture */\n                if (utility.isValidTile(colIndex - 1) && this.state.board[rowIndex + 1][colIndex - 1][0] === opponentPieceColor)\n                    captureTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex - 1}` });\n\n                /* Right Diagonal capture */\n                if (utility.isValidTile(colIndex + 1) && this.state.board[rowIndex + 1][colIndex + 1][0] === opponentPieceColor)\n                    captureTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex + 1}` });\n            }\n\n            /* End of Moves to capture opponent's piece */\n\n        }\n        else if (color === \"B\") {\n            /* Moves to empty Tile */\n\n            if (rowIndex === 6) //if first move => 2 possible moves\n            {\n\n                for (let i = rowIndex - 1; i > (rowIndex - 3) && i >= 0; i--) {\n\n                    if (this.state.board[i][colIndex] === \"XX\")\n                        validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                    else\n                        break; //A piece present in the way\n\n                }\n            }\n            else // only a single tile is possible\n            {\n                for (let i = rowIndex - 1; i > (rowIndex - 2) && i >= 0; i++) {\n                    if (this.state.board[i][colIndex] === \"XX\")\n                        validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                    else\n                        break; //A piece present in the way\n\n                }\n            }\n\n            /* End of Moves to empty Tiles */\n\n\n            /* Moves to capture opponent's piece */\n\n            if (utility.isValidTile(rowIndex - 1)) {\n                /* Left Diagonal capture */\n                if (utility.isValidTile(colIndex - 1) && this.state.board[rowIndex - 1][colIndex - 1][0] === opponentPieceColor)\n                    captureTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex - 1}` });\n\n                /* Right Diagonal capture */\n                if (utility.isValidTile(colIndex + 1) && this.state.board[rowIndex - 1][colIndex + 1][0] === opponentPieceColor)\n                    captureTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex + 1}` });\n            }\n\n            /* End of Moves to capture opponent's piece */\n\n        }\n\n        return { \"validEmptyTiles\": validTiles, \"captureTiles\": captureTiles };\n    }\n\n\n\n    /**\n     * \n     * @param {*} rowIndex \n     * @param {*} colIndex \n     * @param {*} color \n     */\n    knightValidMoves = (rowIndex, colIndex, color) => {\n\n        /**\n         * Knight Valid Moves\n         * Knight can jump over pieces, so no need to check blocking pieces like the way we did for pawns\n         */\n\n        let validTiles = [], captureTiles = [];\n        let opponentPieceColor = (color === \"W\") ? \"B\" : \"W\";\n\n        console.log(\"rowIndex ===> \" + rowIndex + \" | colIndex ===> \" + colIndex);\n        try {\n            if (!(rowIndex < 0 || rowIndex > 7 || colIndex < 0 || colIndex > 7)) {\n                /** There are 8 possible moves for Knight. The 4 pairs are as followed  */\n\n                //top half moves\n                if (utility.isValidTile(rowIndex + 2) && utility.isValidTile(colIndex + 1))\n                    if (this.state.board[rowIndex + 2][colIndex + 1] === \"XX\")                         /* Empty Tile */\n                        validTiles.push({ \"rowIndex\": `${rowIndex + 2}`, \"colIndex\": `${colIndex + 1}` });\n                    else if (this.state.board[rowIndex + 2][colIndex + 1][0] === opponentPieceColor) /* Opponent's piece */\n                        captureTiles.push({ \"rowIndex\": `${rowIndex + 2}`, \"colIndex\": `${colIndex + 1}` });\n\n                if (utility.isValidTile(rowIndex + 2) && utility.isValidTile(colIndex - 1))\n                    if (this.state.board[rowIndex + 2][colIndex - 1] === \"XX\")                         /* Empty Tile */\n                        validTiles.push({ \"rowIndex\": `${rowIndex + 2}`, \"colIndex\": `${colIndex - 1}` });\n                    else if (this.state.board[rowIndex + 2][colIndex - 1][0] === opponentPieceColor) /* Opponent's piece */\n                        captureTiles.push({ \"rowIndex\": `${rowIndex + 2}`, \"colIndex\": `${colIndex - 1}` });\n\n                if (utility.isValidTile(rowIndex + 1) && utility.isValidTile(colIndex + 2))\n                    if (this.state.board[rowIndex + 1][colIndex + 2] === \"XX\")                         /* Empty Tile */\n                        validTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex + 2}` });\n                    else if (this.state.board[rowIndex + 1][colIndex + 2][0] === opponentPieceColor) /* Opponent's piece */\n                        captureTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex + 2}` });\n\n                if (utility.isValidTile(rowIndex + 1) && utility.isValidTile(colIndex - 2))\n                    if (this.state.board[rowIndex + 1][colIndex - 2] === \"XX\")                         /* Empty Tile */\n                        validTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex - 2}` });\n                    else if (this.state.board[rowIndex + 1][colIndex - 2][0] === opponentPieceColor) /* Opponent's piece */\n                        captureTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex - 2}` });\n\n\n\n                //bottom half moves\n                if (utility.isValidTile(rowIndex - 2) && utility.isValidTile(colIndex + 1))\n                    if (this.state.board[rowIndex - 2][colIndex + 1] === \"XX\")                         /* Empty Tile */\n                        validTiles.push({ \"rowIndex\": `${rowIndex - 2}`, \"colIndex\": `${colIndex + 1}` });\n                    else if (this.state.board[rowIndex - 2][colIndex + 1][0] === opponentPieceColor) /* Opponent's piece */\n                        captureTiles.push({ \"rowIndex\": `${rowIndex - 2}`, \"colIndex\": `${colIndex + 1}` });\n\n                if (utility.isValidTile(rowIndex - 2) && utility.isValidTile(colIndex - 1))\n                    if (this.state.board[rowIndex - 2][colIndex - 1] === \"XX\")                          /* Empty Tile */\n                        validTiles.push({ \"rowIndex\": `${rowIndex - 2}`, \"colIndex\": `${colIndex - 1}` });\n                    else if (this.state.board[rowIndex - 2][colIndex - 1][0] === opponentPieceColor) /* Opponent's piece */\n                        captureTiles.push({ \"rowIndex\": `${rowIndex - 2}`, \"colIndex\": `${colIndex - 1}` });\n\n                if (utility.isValidTile(rowIndex - 1) && utility.isValidTile(colIndex + 2))\n                    if (this.state.board[rowIndex - 1][colIndex + 2] === \"XX\")                         /* Empty Tile */\n                        validTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex + 2}` });\n                    else if (this.state.board[rowIndex - 1][colIndex + 2][0] === opponentPieceColor) /* Opponent's piece */\n                        captureTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex + 2}` });\n\n                if (utility.isValidTile(rowIndex - 1) && utility.isValidTile(colIndex - 2))\n                    if (this.state.board[rowIndex - 1][colIndex - 2] === \"XX\")                         /* Empty Tile */\n                        validTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex - 2}` });\n                    else if (this.state.board[rowIndex - 1][colIndex - 2][0] === opponentPieceColor) /* Opponent's piece */\n                        captureTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex - 2}` });\n\n            }\n        } catch (e) {\n\n            if (e.name !== 'SyntaxError') {\n                throw \"Selected Tile is out of bound!\";\n            }\n        }\n\n\n        return { \"validEmptyTiles\": validTiles, \"captureTiles\": captureTiles };\n\n\n    }\n\n\n\n\n\n    /**\n     * \n     * @param {*} rowIndex \n     * @param {*} colIndex \n     * @param {*} color \n     */\n\n    rookValidMoves = (rowIndex, colIndex, color) => {\n\n        /**\n         * Rook Valid Moves\n         * Rook can move horizontally and vertically in straight line.\n         */\n\n        let validTiles = [], captureTiles = [];\n        let opponentPieceColor = (\"W\") ? \"B\" : \"W\";\n\n        try {\n            if (!(rowIndex < 0 || rowIndex > 7 || colIndex < 0 || colIndex > 7)) {\n                //top \n                for (let i = rowIndex + 1; i < 8; i++) {\n                    if (this.state.board[i][colIndex] != \"XX\") {\n                        if (this.state.board[i][colIndex][0] == opponentPieceColor)\n                            captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` }); /* Opponent's piece */\n                        break;\n\n                    }\n\n                    validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` }); /* Empty Tile */\n                }\n\n                //bottom\n                for (let i = rowIndex - 1; i >= 0; i--) {\n                    if (this.state.board[i][colIndex] != \"XX\") {\n                        if (this.state.board[i][colIndex][0] == opponentPieceColor)\n                            captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` }); /* Opponent's piece */\n                        break;\n\n                    }\n\n                    validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                }\n\n                //left\n                for (let j = colIndex - 1; j >= 0; j--) {\n                    if (this.state.board[rowIndex][j] != \"XX\") {\n                        if (this.state.board[rowIndex][j][0] == opponentPieceColor)\n                            captureTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${j}` }); /* Opponent's piece */\n                        break;\n\n                    }\n\n\n                    validTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${j}` });\n                }\n\n                //right\n                for (let j = colIndex + 1; j < 8; j++) {\n                    if (this.state.board[rowIndex][j] != \"XX\") {\n                        if (this.state.board[rowIndex][j][0] == opponentPieceColor)\n                            captureTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${j}` }); /* Opponent's piece */\n                        break;\n\n                    }\n\n\n                    validTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${j}` });\n                }\n\n\n\n\n\n            }\n        } catch (e) {\n\n            if (e.name != 'SyntaxError') {\n                throw \"Selected Tile is out of bound!\";\n            }\n        }\n\n        return { \"validEmptyTiles\": validTiles, \"captureTiles\": captureTiles };\n    }\n\n\n\n\n    /**\n     * \n     * @param {*} rowIndex \n     * @param {*} colIndex \n     * @param {*} color \n     */\n    bishopValidMoves = (rowIndex, colIndex, color) => {\n\n        /**\n         * Bishop Valid Moves\n         * Bishop can move diagonally. \n         */\n\n        let validTiles = [];\n        let captureTiles = [];\n\n        let opponentPieceColor = (color == \"W\") ? \"B\" : \"W\";\n\n        try {\n\n            if (!(rowIndex < 0 || rowIndex > 7 || colIndex < 0 || colIndex > 7)) {\n\n\n\n                /* Top Left Diagonal */\n\n                for (let i = rowIndex + 1, j = colIndex - 1; i < 8 && j >= 0; i++, j--) {\n                    if (utility.isValidTile(i) && utility.isValidTile(j)) {\n\n                        if (this.state.board[i][j] == \"XX\") /* Empty Tile */\n                            validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                        else {\n                            if (this.state.board[i][j][0] == opponentPieceColor) /* Opponent's Piece */\n                                captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                            break;\n\n                        }\n                    }\n\n                }\n\n                /* Bottom Left Diagonal */\n\n                for (let i = rowIndex - 1, j = colIndex - 1; i >= 0 && j >= 0; i--, j--) {\n                    if (utility.isValidTile(i) && utility.isValidTile(j)) {\n\n                        if (this.state.board[i][j] == \"XX\") /* Empty Tile */\n                            validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                        else {\n                            if (this.state.board[i][j][0] == opponentPieceColor) /* Opponent's Piece */\n                                captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                            break;\n\n                        }\n                    }\n\n                }\n\n\n                /* Top Right Diagonal */\n\n                for (let i = rowIndex + 1, j = colIndex + 1; i < 8 && j < 8; i++, j++) {\n                    if (utility.isValidTile(i) && utility.isValidTile(j)) {\n\n                        if (this.state.board[i][j] == \"XX\") /* Empty Tile */\n                            validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                        else {\n                            if (this.state.board[i][j][0] == opponentPieceColor) /* Opponent's Piece */\n                                captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                            break;\n\n                        }\n                    }\n\n                }\n\n\n                /* Bottom Right Diagonal */\n\n                for (let i = rowIndex - 1, j = colIndex + 1; i >= 0 && j < 8; i--, j++) {\n                    if (utility.isValidTile(i) && utility.isValidTile(j)) {\n\n                        if (this.state.board[i][j] == \"XX\") /* Empty Tile */\n                            validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                        else {\n                            if (this.state.board[i][j][0] == opponentPieceColor) /* Opponent's Piece */\n                                captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                            break;\n\n                        }\n                    }\n\n                }\n\n            }\n        } catch (e) {\n\n\n            if (e.name != 'SyntaxError') {\n                throw \"Selected Tile is out of bound!\";\n            }\n        }\n\n        return { \"validEmptyTiles\": validTiles, \"captureTiles\": captureTiles };\n    }\n\n    /* End of Valid Bishop Move */\n\n    /**\n     * \n     * @param {*} rowIndex \n     * @param {*} colIndex \n     * @param {*} color \n     */\n    queenValidMoves = (rowIndex, colIndex, color) => {\n\n        let validTiles = [];\n        let captureTiles = [];\n\n        let opponentPieceColor = (color == \"W\") ? \"B\" : \"W\";\n\n\n        /* Queen can move like rook as well as bishop */\n\n        try {\n\n            if (!(rowIndex < 0 || rowIndex > 7 || colIndex < 0 || colIndex > 7)) {\n                /* Rook-like moves for Queen */\n\n                //top \n                for (let i = rowIndex + 1; i < 8; i++) {\n                    if (this.state.board[i][colIndex] != \"XX\") {\n                        if (this.state.board[i][colIndex][0] == opponentPieceColor)\n                            captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                        break;\n\n                    }\n\n                    validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                }\n\n                //bottom\n                for (let i = rowIndex - 1; i >= 0; i--) {\n                    if (this.state.board[i][colIndex] != \"XX\") {\n                        if (this.state.board[i][colIndex][0] == opponentPieceColor)\n                            captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                        break;\n\n                    }\n\n\n                    validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${colIndex}` });\n                }\n\n                //left\n                for (let j = colIndex - 1; j >= 0; j--) {\n                    if (this.state.board[rowIndex][j] != \"XX\") {\n                        if (this.state.board[rowIndex][j][0] == opponentPieceColor)\n                            captureTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${j}` });\n                        break;\n\n                    }\n\n\n                    validTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${j}` });\n                }\n\n                //right\n                for (let j = colIndex + 1; j < 8; j++) {\n                    if (this.state.board[rowIndex][j] != \"XX\") {\n                        if (this.state.board[rowIndex][j][0] == opponentPieceColor)\n                            captureTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${j}` });\n                        break;\n\n                    }\n\n\n                    validTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${j}` });\n                }\n\n                /* Bishop-like moves for Queen */\n\n                /* Top Left Diagonal */\n\n                for (let i = rowIndex + 1, j = colIndex - 1; i < 8 && j >= 0; i++, j--) {\n                    if (utility.isValidTile(i) && utility.isValidTile(j)) {\n\n                        if (this.state.board[i][j] == \"XX\")\n                            validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                        else {\n                            if (this.state.board[i][j][0] == opponentPieceColor)\n                                captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                            break;\n\n                        }\n\n                    }\n\n                }\n\n                /* Bottom Left Diagonal */\n\n                for (let i = rowIndex - 1, j = colIndex - 1; i >= 0 && j >= 0; i--, j--) {\n                    if (utility.isValidTile(i) && utility.isValidTile(j)) {\n\n                        if (this.state.board[i][j] == \"XX\")\n                            validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                        else {\n                            if (this.state.board[i][j][0] == opponentPieceColor)\n                                captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                            break;\n\n                        }\n\n                    }\n\n                }\n\n\n                /* Top Right Diagonal */\n\n                for (let i = rowIndex + 1, j = colIndex + 1; i < 8 && j < 8; i++, j++) {\n                    if (utility.isValidTile(i) && utility.isValidTile(j)) {\n\n                        if (this.state.board[i][j] == \"XX\")\n                            validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                        else {\n                            if (this.state.board[i][j][0] == opponentPieceColor)\n                                captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                            break;\n\n                        }\n\n                    }\n\n                }\n\n\n                /* Bottom Right Diagonal */\n\n                for (let i = rowIndex - 1, j = colIndex + 1; i >= 0 && j < 8; i--, j++) {\n                    if (utility.isValidTile(i) && utility.isValidTile(j)) {\n\n                        if (this.state.board[i][j] == \"XX\")\n                            validTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                        else {\n                            if (this.state.board[i][j][0] == opponentPieceColor)\n                                captureTiles.push({ \"rowIndex\": `${i}`, \"colIndex\": `${j}` });\n                            break;\n\n                        }\n\n                    }\n\n                }\n\n\n            }\n\n        } catch (error) {\n\n            if (error.name != \"SyntaxError\")\n                throw (\"Index out of bound!\");\n        }\n\n        return { \"validEmptyTiles\": validTiles, \"captureTiles\": captureTiles };\n    }\n\n    /* End of Queen Valid Moves */\n\n\n    /* King Valid Moves */\n\n    /**\n     * \n     * @param {*} rowIndex \n     * @param {*} colIndex \n     * @param {*} color \n     */\n    kingValidMoves = (rowIndex, colIndex, color) => {\n\n        /**\n         * King moves 1 tile in any direction viz, top, bottom, left, right, diagonal\n         * !!!! Current implementation of this method is not valid in all cases !!!!\n         * Need to check if King is under attack by moving to any empty tile or\n         * by capturing opponent's piece.\n         */\n        let validTiles = [], captureTiles = [];\n\n\n        try {\n\n            /* top tile */\n            if (utility.isValidTile(rowIndex + 1))\n                if (this.state.board[rowIndex + 1][colIndex] == \"XX\" && !this.isKingChecked({ \"rowIndex\": rowIndex + 1, \"colIndex\": colIndex }, color))\n                    validTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex}` });\n\n            /* bottom tile */\n            if (utility.isValidTile(rowIndex - 1))\n                if (this.state.board[rowIndex - 1][colIndex] == \"XX\" && !this.isKingChecked({ \"rowIndex\": rowIndex - 1, \"colIndex\": colIndex }, color))\n                    validTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex}` });\n\n            /* left tile */\n            if (utility.isValidTile(colIndex - 1))\n                if (this.state.board[rowIndex][colIndex - 1] == \"XX\" && !this.isKingChecked({ \"rowIndex\": rowIndex, \"colIndex\": colIndex - 1 }, color))\n                    validTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${colIndex - 1}` });\n\n            /* right tile */\n            if (utility.isValidTile(colIndex + 1))\n                if (this.state.board[rowIndex][colIndex + 1] == \"XX\" && !this.isKingChecked({ \"rowIndex\": rowIndex, \"colIndex\": colIndex + 1 }, color))\n                    validTiles.push({ \"rowIndex\": `${rowIndex}`, \"colIndex\": `${colIndex + 1}` });\n\n            /* top left diagonal */\n            if (utility.isValidTile(rowIndex + 1) && utility.isValidTile(colIndex - 1))\n                if (this.state.board[rowIndex + 1][colIndex - 1] == \"XX\" && !this.isKingChecked({ \"rowIndex\": rowIndex + 1, \"colIndex\": colIndex - 1 }, color))\n                    validTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex - 1}` });\n\n            /* bottom left diagonal */\n            if (utility.isValidTile(rowIndex - 1) && utility.isValidTile(colIndex - 1))\n                if (this.state.board[rowIndex - 1][colIndex - 1] == \"XX\" && !this.isKingChecked({ \"rowIndex\": rowIndex - 1, \"colIndex\": colIndex - 1 }, color))\n                    validTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex - 1}` });\n\n            /* top right diagonal */\n            if (utility.isValidTile(rowIndex + 1) && utility.isValidTile(colIndex + 1))\n                if (this.state.board[rowIndex + 1][colIndex + 1] == \"XX\" && !this.isKingChecked({ \"rowIndex\": rowIndex + 1, \"colIndex\": colIndex + 1 }, color))\n                    validTiles.push({ \"rowIndex\": `${rowIndex + 1}`, \"colIndex\": `${colIndex + 1}` });\n\n            /* bottom right diagonal */\n            if (utility.isValidTile(rowIndex - 1) && utility.isValidTile(colIndex + 1))\n                if (this.state.board[rowIndex - 1][colIndex + 1] == \"XX\" && !this.isKingChecked({ \"rowIndex\": rowIndex - 1, \"colIndex\": colIndex + 1 }, color))\n                    validTiles.push({ \"rowIndex\": `${rowIndex - 1}`, \"colIndex\": `${colIndex + 1}` });\n\n        } catch (error) {\n            if (error.name != 'SyntaxError')\n                throw 'Index out of bound!';\n        }\n\n        return { \"validEmptyTiles\": validTiles, \"captureTiles\": captureTiles };\n    }\n\n    /* End of King Valid Moves */\n\n    /* Check if King is under check */\n\n\n    /**\n     * Check if the King can come under check by movement of other pieces of the same player (called as discovery in normal chess terms)\n     * This function needs to be called for every piece movement! `validKingTile` parameter is the coordinates of the valid king tile likewise `color` indicates king's color.\n     */\n\n    /**\n     * \n     * @param {*} kingTile \n     * @param {*} color \n     */\n\n    isKingChecked = (validKingTile, color) => {\n        console.log(\"color of the king ==== > \" + color);\n\n        let opponentPieceColor = (color == 'W') ? 'B' : 'W';\n        let isChecked = false;\n        let rowIndex = validKingTile.rowIndex;\n        let colIndex = validKingTile.colIndex;\n        console.log(\"rowIndex = \" + rowIndex + \" | colIndex = \" + colIndex);\n\n        /**\n         * Check for threats from possible opponent pieces\n         */\n\n        /* Linear Attacks from Rook/Queen */\n\n        // Attack by Rook/Queen from Top\n        for (let row = rowIndex + 1; row < 8; row++) {\n            console.log(\"attack by rook/Queen top\");\n\n            if (this.state.board[row][colIndex] != \"XX\" && this.state.board[row][colIndex][0] != opponentPieceColor) /* same color so no threat */ {\n\n                break;\n            }\n\n            if (this.state.board[row][colIndex][1] == 'R' || this.state.board[row][colIndex][1] == 'Q') {\n                isChecked = true;\n                return isChecked;\n            }\n\n        }\n\n        //Attack by Rook/Queen from bottom\n        for (let row = rowIndex - 1; row >= 0; row--) {\n            console.log(\"attack by rook/Queen bottom\");\n            if (this.state.board[row][colIndex] != \"XX\" && this.state.board[row][colIndex][0] != opponentPieceColor) /* same color so no threat */ {\n\n                break;\n            }\n\n            if (this.state.board[row][colIndex][1] == 'R' || this.state.board[row][colIndex][1] == 'Q') {\n                isChecked = true;\n                return isChecked;\n            }\n\n        }\n\n\n        //Attack by Rook/Queen from Left\n        for (let col = colIndex - 1; col >= 0; col--) {\n            console.log(\"attack by rook/Queen Left\");\n            if (this.state.board[rowIndex][col] != \"XX\" && this.state.board[rowIndex][col][0] !== opponentPieceColor) /* same color so no threat */ {\n\n                break;\n            }\n\n            if (this.state.board[rowIndex][col][1] === 'R' || this.state.board[rowIndex][col][1] === 'Q') {\n                isChecked = true;\n                return isChecked;\n            }\n        }\n\n\n        //Attacks by Rook/Queen from Right\n        for (let col = colIndex + 1; col < 8; col++) {\n            console.log(\"attack by rook/Queen Right\");\n            if (this.state.board[rowIndex][col] != \"XX\" && this.state.board[rowIndex][col][0] !== opponentPieceColor) /* same color so no threat */\n                break;\n\n            if (this.state.board[rowIndex][col][1] === 'R' || this.state.board[rowIndex][col][1] === 'Q') {\n                isChecked = true;\n                return isChecked;\n            }\n        }\n\n\n\n        /* Diagonal Attacks by Bishops and Queen */\n\n        //top left diagonal\n        for (let row = rowIndex + 1, col = colIndex - 1; row < 8 && col >= 0; row++, col--) {\n            console.log(\"Bishop/Queen top left Diagonal\");\n\n            if (this.state.board[row][col] != \"XX\" && this.state.board[row][col][0] != opponentPieceColor) /* same color so no threat */\n                break;\n\n            if (this.state.board[row][col][1] === 'Q' || this.state.board[row][col][1] === 'B') {\n                isChecked = true;\n                console.log(\"ischecked ===> \" + isChecked);\n                return isChecked;\n            }\n            else\n                console.log(this.state.board[row][col] + \" is not a threat!\");\n        }\n\n        //top right diagonal\n        for (let row = rowIndex + 1, col = colIndex + 1; row < 8 && col < 8; row++, col++) {\n            console.log(\"attack by Bishop/Queen top right diagonal\");\n            if (this.state.board[row][col] != \"XX\" && this.state.board[row][col][0] !== opponentPieceColor) /* same color so no threat */\n                break;\n\n            if (this.state.board[row][col][1] === 'Q' || this.state.board[row][col][1] === 'B') {\n                isChecked = true;\n                return isChecked;\n            }\n        }\n\n        //bottom left diagonal\n        for (let row = rowIndex - 1, col = colIndex - 1; row >= 0 && col >= 0; row--, col--) {\n            console.log(\"attack by Bishop/Queen bottom-left Diagonal\");\n            if (this.state.board[row][col] != \"XX\" && this.state.board[row][col][0] !== opponentPieceColor) /* same color so no threat */\n                break;\n\n            if (this.state.board[row][col][1] === 'Q' || this.state.board[row][col][1] === 'B') {\n                isChecked = true;\n                return isChecked;\n            }\n        }\n\n        //bottom right diagonal\n        for (let row = rowIndex - 1, col = colIndex + 1; row >= 0 && col < 8; row--, col++) {\n            console.log(\"attack by Bishop/Queen bottom-right diagonal\");\n            if (this.state.board[row][col] != \"XX\" && this.state.board[row][col][0] !== opponentPieceColor) /* same color so no threat */\n                break;\n\n            if (this.state.board[row][col][1] === 'Q' || this.state.board[row][col][1] === 'B') {\n                isChecked = true;\n                return isChecked;\n            }\n        }\n\n\n\n\n        /* Attacks by pawn */\n        if (color == 'W')  //White King is being attcked\n        {\n\n            // Attack by top-left diagonal pawn\n            if (utility.isValidTile(rowIndex + 1) && utility.isValidTile(colIndex - 1)) {\n                console.log(\"attack on white king by top-left black pawn\");\n                if (this.state.board[rowIndex + 1][colIndex - 1][0] === opponentPieceColor && this.state.board[rowIndex + 1][colIndex - 1][1] === 'P') {\n                    isChecked = true;\n                    return isChecked;\n                }\n            }\n\n\n            // Attack by top-right diagonal pawn\n            if (utility.isValidTile(rowIndex + 1) && utility.isValidTile(colIndex + 1)) {\n                console.log(\"attack on white king by top-right black pawn\");\n                if (this.state.board[rowIndex + 1][colIndex + 1][0] === opponentPieceColor && this.state.board[rowIndex + 1][colIndex + 1][1] === 'P') {\n                    isChecked = true;\n                    return isChecked;\n                }\n            }\n\n        }\n        else if (color == 'B') //Black King is being attacked\n        {\n\n            // Attack by bottom-left diagonal pawn\n            if (utility.isValidTile(rowIndex - 1) && utility.isValidTile(colIndex - 1)) {\n                console.log(\"attack on black King by bottom-left diagonal white pawn\");\n                if (this.state.board[rowIndex - 1][colIndex - 1][0] === opponentPieceColor && this.state.board[rowIndex - 1][colIndex - 1][1] === 'P') {\n                    isChecked = true;\n                    return isChecked;\n                }\n            }\n\n\n            //Attack by bottom-right diagonal pawn\n            if (utility.isValidTile(rowIndex - 1) && utility.isValidTile(colIndex + 1)) {\n                console.log(\"attack on black king by bottom-right diagonal white pawn\");\n                if (this.state.board[rowIndex - 1][colIndex + 1][0] === opponentPieceColor && this.state.board[rowIndex - 1][colIndex + 1][1] === 'P') {\n                    isChecked = true;\n                    return isChecked;\n                }\n            }\n\n        }\n\n\n\n\n        //console.log(\"ischecked => \" + isChecked);\n\n        return isChecked;\n\n    }\n\n\n\n    /**\n     * \n     * @returns chess board\n     */\n    render() {\n        return (\n            <div className=\"container-fluid\" id=\"mainContainer\">\n                <div className=\"row no-gutters my-2 my-lg-4\">\n\n                    {/* Game Controls */}\n                    <div className=\"col-12 col-lg-1\" id=\"gameControls\">\n\n\n                        <img\n                            src={startPlay}\n                            alt=\"startGame\"\n                            id=\"startButton\"\n                            className=\"gameControl mx-3 my-2 my-lg-4\"\n                            onClick={this.startGame}\n                        />\n\n\n\n                        <img\n                            src={restartGame}\n                            id=\"restartButton\"\n                            className=\"gameControl mx-3 my-2 my-lg-4\"\n                            alt=\"restartGame\"\n                        />\n\n                    </div>\n\n                    {/* Board and Score */}\n\n                    <div className=\"col-12 col-lg-10\">\n\n                        {/*  Chess Board */}\n                        <div id=\"chessBoard\">\n                            <div id=\"boardContainer\">\n\n                                {\n                                    this.state.board.slice(0).reverse().map((row, rowIndex) => {\n                                        let tileCounter = rowIndex % 2 === 0 ? 0 : 1;\n                                        return (\n                                            row.map((tile, colIndex) => {\n                                                let id = utility.getFile(colIndex.toString()) + (8 - rowIndex).toString();\n                                                let color = tileCounter % 2 === 0 ? \"white\" : \"black\";\n                                                let piece = tile;\n                                                let pieceClass = \"XX\";\n\n                                                console.log(`id = ${id} color = ${color} piece = ${piece} pieceClass = ${pieceClass} tileCounter ${tileCounter}`);\n                                                tileCounter = tileCounter === 0 ? 1 : 0;\n                                                switch (piece) {\n                                                    case \"WP\":\n                                                        pieceClass = PawnWhite;\n                                                        break;\n                                                    case \"BP\":\n                                                        pieceClass = PawnBlack;\n                                                        break;\n                                                    case \"WR\":\n                                                        pieceClass = RookWhite;\n                                                        break;\n                                                    case \"BR\":\n                                                        pieceClass = RookBlack;\n                                                        break;\n                                                    case \"WN\":\n                                                        pieceClass = KnightWhite;\n                                                        break;\n                                                    case \"BN\":\n                                                        pieceClass = KnightBlack;\n                                                        break;\n                                                    case \"WB\":\n                                                        pieceClass = BishopWhite;\n                                                        break;\n                                                    case \"BB\":\n                                                        pieceClass = BishopBlack;\n                                                        break;\n                                                    case \"WK\":\n                                                        pieceClass = KingWhite;\n                                                        break;\n                                                    case \"BK\":\n                                                        pieceClass = KingBlack;\n                                                        break;\n                                                    case \"WQ\":\n                                                        pieceClass = QueenWhite;\n                                                        break;\n                                                    case \"BQ\":\n                                                        pieceClass = QueenBlack;\n                                                        break;\n                                                    default:\n                                                        pieceClass = \"XX\";\n\n                                                }\n\n                                                return (\n                                                    <div className={`block ${color}`} id={id} key={id} onClick={this.handleClick}>\n                                                        {!(piece === \"XX\") ? <img src={pieceClass} alt={piece} /> : \"\"}\n                                                    </div>\n                                                );\n\n                                            }))\n\n\n                                    })\n                                }\n\n                            </div>\n                        </div>\n\n                        {/* Timer and Score */}\n                        <div className=\"row my-4\">\n\n                            {/* Move History */}\n                            <div className=\"col-6\">\n                                {/* Move History*/}\n                                <div className=\"card\" id=\"moveContainer\">\n                                    <div className=\"card-header\">\n                                        Move History\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <div id=\"history-container\"></div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            {/* Score */}\n                            <div className=\"col-6\">\n                                <div className=\"card\" id=\"scoreContainer\">\n                                    <div className=\"card-header\">\n                                        Score\n                                    </div>\n\n                                    <div className=\"card-body\" id=\"score\"></div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n\n\n                </div>\n            </div >\n        );\n    }\n\n\n}\n\nexport default ChessBoard;","import './App.css';\nimport ChessBoard from './components/battle/ChessBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChessBoard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}